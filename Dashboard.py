# dashboard_analyse_democratie_liberale.py
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import networkx as nx
from datetime import datetime
import base64
import numpy as np

# Configuration de la page
st.set_page_config(
    page_title="ANALYSE STRAT√âGIQUE - D√âMOCRATIE LIB√âRALE",
    page_icon="üèõÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personnalis√© (adapt√©)
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1f3a60;
        text-align: center;
        margin-bottom: 1rem;
        font-weight: 700;
        border-bottom: 3px solid #1f3a60;
        padding-bottom: 1rem;
    }
    .insight-box {
        background-color: #e8f4fd;
        border-left: 5px solid #3498db;
        padding: 1rem;
        border-radius: 5px;
        margin: 1rem 0;
    }
    .insight-box h4 {
        color: #2980b9;
        margin-top: 0;
    }
    .metric-card {
        background: white;
        border: 1px solid #ddd;
        border-radius: 10px;
        padding: 1rem;
        margin: 0.5rem 0;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        text-align: center;
    }
    .metric-value {
        font-size: 2rem;
        font-weight: 700;
    }
    .metric-label {
        font-size: 0.9rem;
        color: #666;
    }
    .fondation { border-left: 5px solid #e74c3c; color: #c0392b; }
    .croissance { border-left: 5px solid #3498db; color: #2980b9; }
    .influence { border-left: 5px solid #9b59b6; color: #8e44ad; }
    .heritage { border-left: 5px solid #2ecc71; color: #27ae60; }
    .dl-blue { color: #1f3a60; }
    .dl-orange { color: #e67e22; }
</style>
""", unsafe_allow_html=True)

class AnalyseDemocratieLiberale:
    def __init__(self):
        self.initialize_data()
        self.generate_chronological_data()
        self.generate_comparative_data()

    def initialize_data(self):
        """Initialise les donn√©es de base sur D√©mocratie Lib√©rale"""
        self.parti_data = {
            'FONDATION': {
                'date_creation': '1997-06-24',
                'fondateur_principal': 'Alain Madelin',
                'membres_fondateurs': 15,
                'budget_initial_millions': 2.5,
                'origine': 'Fusion du Parti r√©publicain et du Parti populaire pour la d√©mocratie fran√ßaise'
            },
            'CROISSANCE': {
                'membres_max': 30000,
                'elus_nationaux': 42,
                'ministres_gouvernement': 8,
                'budget_peak_millions': 15.2,
                'influence_mediatique': 7
            },
            'INFLUENCE': {
                'doctrine': 'Lib√©ralisme classique',
                'positionnement': 'Droite lib√©rale',
                'alliances_strategiques': ['UMP', 'UDF'],
                'think_tanks_affilies': 3,
                'courants_internes': ['Lib√©raux-conservateurs', 'Centristes lib√©raux']
            },
            'HERITAGE': {
                'dissolution': '2002-11-17',
                'integration': 'Union pour un mouvement populaire (UMP)',
                'heritage_ideologique': 'Renouveau de la pens√©e lib√©rale en France',
                'personnalites_issues': ['Alain Madelin', 'Jean-Pierre Raffarin', 'Herv√© Novelli']
            }
        }
        
        # Relations politiques strat√©giques
        self.relations_politiques = [
            {'source': 'Alain Madelin', 'target': 'Jacques Chirac', 'poids': 8, 'type': 'Alliance tactique'},
            {'source': 'D√©mocratie Lib√©rale', 'target': 'UMP', 'poids': 9, 'type': 'Fusion-absorption'},
            {'source': 'Jean-Pierre Raffarin', 'target': 'D√©mocratie Lib√©rale', 'poids': 7, 'type': 'Leadership'},
            {'source': 'Lib√©raux', 'target': 'Centristes UDF', 'poids': 6, 'type': 'Convergence id√©ologique'},
            {'source': 'D√©mocratie Lib√©rale', 'target': 'Medias lib√©raux', 'poids': 5, 'type': 'Influence'},
            {'source': 'Alain Madelin', 'target': 'Think tanks', 'poids': 7, 'type': 'Expertise'},
            {'source': 'DL Jeunes', 'target': 'D√©mocratie Lib√©rale', 'poids': 4, 'type': 'Militantisme'}
        ]

    def generate_chronological_data(self):
        """G√©n√®re des donn√©es chronologiques pour l'analyse historique"""
        annees = list(range(1997, 2004))
        
        # Donn√©es simul√©es mais r√©alistes bas√©es sur l'histoire du parti
        self.evolution_membres = [5000, 15000, 28000, 30000, 25000, 18000, 12000]
        self.evolution_budget = [2.5, 8.2, 12.5, 15.2, 11.8, 8.5, 4.2]
        self.influence_politique = [3, 6, 8, 9, 8, 6, 4]
        self.resultats_electoraux = [4.2, 5.8, 7.2, 6.8, 5.5, 4.1, 3.2]  # en %
        
        self.annees_chrono = annees
        
        # √âv√©nements cl√©s
        self.evenements_cles = [
            {'annee': 1997, 'evenement': 'Fondation officielle', 'impact': 9},
            {'annee': 1998, 'evenement': 'Premi√®res √©lections r√©gionales', 'impact': 6},
            {'annee': 1999, 'evenement': '√âlections europ√©ennes - liste commune', 'impact': 7},
            {'annee': 2000, 'evenement': 'Participation au gouvernement', 'impact': 8},
            {'annee': 2001, 'evenement': '√âlections municipales - succ√®s local', 'impact': 6},
            {'annee': 2002, 'evenement': 'Pr√©sidentielle + cr√©ation UMP', 'impact': 10},
            {'annee': 2003, 'evenement': 'Dissolution officielle', 'impact': 8}
        ]

    def generate_comparative_data(self):
        """G√©n√®re des donn√©es comparatives avec d'autres partis de l'√©poque"""
        self.comparaison_partis = pd.DataFrame({
            'Parti': ['D√©mocratie Lib√©rale', 'RPR', 'UDF', 'PS', 'PCF', 'FN'],
            'P√©riode_activit√©': ['1997-2002', '1976-2002', '1978-2007', '1969-', '1920-', '1972-'],
            'Membres_max': [30000, 170000, 60000, 120000, 200000, 50000],
            'Doctrine': ['Lib√©ralisme', 'Gaullisme', 'Centrisme', 'Socialisme', 'Communisme', 'Nationalisme'],
            'Ministres_gouvernement': [8, 45, 32, 38, 15, 0],
            'Dur√©e_vie_annees': [5, 26, 29, '53+', '103+', '51+']
        })

    def display_header(self):
        """Affiche l'en-t√™te avec des m√©triques analytiques"""
        st.markdown('<h1 class="main-header">üèõÔ∏è ANALYSE STRAT√âGIQUE - D√âMOCRATIE LIB√âRALE (1997-2002)</h1>', unsafe_allow_html=True)
        st.markdown("### Analyse du parcours politique et de l'h√©ritage lib√©ral")
        
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.markdown(f"""
            <div class="metric-card">
                <div class="metric-value fondation">{self.parti_data['FONDATION']['membres_fondateurs']}</div>
                <div class="metric-label">Membres Fondateurs</div>
            </div>
            """, unsafe_allow_html=True)
        with col2:
            st.markdown(f"""
            <div class="metric-card">
                <div class="metric-value croissance">{self.parti_data['CROISSANCE']['membres_max']}</div>
                <div class="metric-label">Membres Maximum</div>
            </div>
            """, unsafe_allow_html=True)
        with col3:
            st.markdown(f"""
            <div class="metric-card">
                <div class="metric-value influence">{self.parti_data['CROISSANCE']['ministres_gouvernement']}</div>
                <div class="metric-label">Ministres au Gouvernement</div>
            </div>
            """, unsafe_allow_html=True)
        with col4:
            duree_vie = 2002 - 1997
            st.markdown(f"""
            <div class="metric-card">
                <div class="metric-value heritage">{duree_vie}</div>
                <div class="metric-label">Ann√©es d'Existence</div>
            </div>
            """, unsafe_allow_html=True)

        st.markdown("""
        <div class="insight-box">
            <h4>üß† Analyse Strat√©gique Principale</h4>
            <p>D√©mocratie Lib√©rale a repr√©sent√© une tentative unique de structurer une <strong>droite lib√©rale pure</strong> dans le paysage politique fran√ßais. Malgr√© sa courte existence (1997-2002), le parti a r√©ussi √† influencer durablement le d√©bat √©conomique et √† former des cadres qui joueront un r√¥le important dans les gouvernements suivants. Sa fusion dans l'UMP marque √† la fois un √©chec de p√©rennisation autonome et une r√©ussite d'int√©gration dans le jeu politique majoritaire.</p>
        </div>
        """, unsafe_allow_html=True)

    def analyse_reseau_influence(self):
        """Analyse du r√©seau d'influence et des relations politiques"""
        st.markdown("### üîó Analyse du R√©seau d'Influence Politique")
        
        # Cr√©ation du graphe
        G = nx.DiGraph()
        for rel in self.relations_politiques:
            G.add_edge(rel['source'], rel['target'], weight=rel['poids'], type=rel['type'])
        
        # Calcul des m√©triques de centralit√©
        centrality_degree = nx.degree_centrality(G)
        centrality_betweenness = nx.betweenness_centrality(G, weight='weight')
        centrality_closeness = nx.closeness_centrality(G)

        # DataFrame des r√©sultats
        df_centralite = pd.DataFrame({
            'Acteur': list(centrality_degree.keys()),
            'Influence Directe': [centrality_degree[n] for n in centrality_degree.keys()],
            'Contr√¥le des R√©seaux': [centrality_betweenness[n] for n in centrality_betweenness.keys()],
            'Accessibilit√© Strat√©gique': [centrality_closeness[n] for n in centrality_closeness.keys()]
        }).sort_values(by='Contr√¥le des R√©seaux', ascending=False)

        st.dataframe(df_centralite, use_container_width=True)

        # Visualisation du r√©seau
        pos = nx.spring_layout(G, k=1, iterations=50)
        edge_x = []
        edge_y = []
        for edge in G.edges():
            x0, y0 = pos[edge[0]]
            x1, y1 = pos[edge[1]]
            edge_x.extend([x0, x1, None])
            edge_y.extend([y0, y1, None])
        
        edge_trace = go.Scatter(x=edge_x, y=edge_y, line=dict(width=1.5, color='#888'), hoverinfo='none', mode='lines')
        
        node_x = []
        node_y = []
        node_text = []
        node_size = []
        for node in G.nodes():
            x, y = pos[node]
            node_x.append(x)
            node_y.append(y)
            node_text.append(f"{node}<br>Contr√¥le: {centrality_betweenness[node]:.2f}")
            node_size.append(20 + centrality_betweenness[node] * 60)

        node_trace = go.Scatter(
            x=node_x, y=node_y, mode='markers+text', hoverinfo='text', text=list(G.nodes()),
            textposition="top center", marker=dict(size=node_size, color='#1f3a60', line=dict(width=2, color='#e67e22'))
        )
        
        fig = go.Figure(data=[edge_trace, node_trace], layout=go.Layout(
            title=dict(text="R√©seau d'Influence de D√©mocratie Lib√©rale", font=dict(size=16)),
            showlegend=False, hovermode='closest',
            margin=dict(b=20,l=5,r=5,t=40), annotations=[ dict(
                text="La taille des n≈ìuds indique la capacit√© de contr√¥le dans le r√©seau d'influence.",
                showarrow=False, xref="paper", yref="paper", x=0.005, y=-0.002, xanchor='left', yanchor='bottom', font=dict(size=12)
            )], xaxis=dict(showgrid=False, zeroline=False, showticklabels=False), 
            yaxis=dict(showgrid=False, zeroline=False, showticklabels=False), height=500
        ))
        st.plotly_chart(fig, use_container_width=True)

        st.markdown("""
        <div class="insight-box">
            <h4>üß† Analyse du R√©seau d'Influence</h4>
            <p><strong>Alain Madelin</strong> appara√Æt comme le n≈ìud central incontournable, ce qui correspond √† son r√¥le de fondateur et figure m√©diatique du lib√©ralisme fran√ßais. La connexion forte avec <strong>l'UMP</strong> montre la strat√©gie d'int√©gration au sein de la droite gouvernementale. Les relations avec les <strong>think tanks</strong> et <strong>m√©dias lib√©raux</strong> illustrent l'ancrage intellectuel du mouvement, caract√©ristique des partis doctrinaux.</p>
        </div>
        """, unsafe_allow_html=True)

    def analyse_performance_politique(self):
        """Analyse de la performance politique et √©lectorale"""
        st.markdown("### üìà Analyse de la Performance Politique")
        
        # Cr√©ation d'indicateurs de performance
        df_performance = pd.DataFrame([
            {
                'Indicateur': 'Croissance membres',
                'Valeur': self.parti_data['CROISSANCE']['membres_max'],
                'Unit√©': 'membres',
                'Performance': '√âlev√©e'
            },
            {
                'Indicateur': 'Influence gouvernementale', 
                'Valeur': self.parti_data['CROISSANCE']['ministres_gouvernement'],
                'Unit√©': 'ministres',
                'Performance': 'Moyenne'
            },
            {
                'Indicateur': 'Budget maximum',
                'Valeur': self.parti_data['CROISSANCE']['budget_peak_millions'],
                'Unit√©': 'millions ‚Ç¨',
                'Performance': 'Correcte'
            },
            {
                'Indicateur': 'Dur√©e de vie',
                'Valeur': 5,
                'Unit√©': 'ann√©es',
                'Performance': 'Faible'
            }
        ])

        col1, col2 = st.columns(2)
        with col1:
            fig_croissance = px.bar(df_performance, x='Indicateur', y='Valeur', 
                                   color='Performance',
                                   title="Indicateurs de Performance Cl√©",
                                   color_discrete_map={'√âlev√©e': '#2ecc71', 'Moyenne': '#f39c12', 'Correcte': '#3498db', 'Faible': '#e74c3c'})
            st.plotly_chart(fig_croissance, use_container_width=True)
        
        with col2:
            # Analyse du rapport co√ªt/efficacit√©
            cout_par_membre = (self.parti_data['CROISSANCE']['budget_peak_millions'] * 1000000) / self.parti_data['CROISSANCE']['membres_max']
            influence_par_membre = self.parti_data['CROISSANCE']['ministres_gouvernement'] / self.parti_data['CROISSANCE']['membres_max'] * 1000
            
            fig_efficacite = go.Figure()
            fig_efficacite.add_trace(go.Bar(name='Co√ªt par membre', x=['Efficacit√©'], y=[cout_par_membre]))
            fig_efficacite.add_trace(go.Bar(name='Influence par 1000 membres', x=['Efficacit√©'], y=[influence_par_membre]))
            fig_efficacite.update_layout(title="Analyse d'Efficacit√© Organisationnelle")
            st.plotly_chart(fig_efficacite, use_container_width=True)

        st.markdown("""
        <div class="insight-box">
            <h4>üß† Analyse de Performance</h4>
            <p>D√©mocratie Lib√©rale d√©montre une <strong>croissance rapide</strong> mais une <strong>p√©rennit√© limit√©e</strong>. La performance en termes d'influence gouvernementale est remarquable pour un parti jeune, avec 8 ministres issus de ses rangs. Cependant, la courte dur√©e de vie r√©v√®le les limites d'une structure trop d√©pendante de son leader et de son positionnement doctrinal strict dans le paysage politique fran√ßais peu favorable aux partis monoth√©matiques.</p>
        </div>
        """, unsafe_allow_html=True)

    def analyse_chronologie_strategique(self):
        """Analyse chronologique d√©taill√©e avec √©v√©nements cl√©s"""
        st.markdown("### ‚è≥ Chronologie Strat√©gique (1997-2002)")
        
        # Graphique d'√©volution
        fig = go.Figure()
        fig.add_trace(go.Scatter(x=self.annees_chrono, y=self.evolution_membres, 
                               mode='lines+markers', name='Membres', yaxis='y1'))
        fig.add_trace(go.Scatter(x=self.annees_chrono, y=self.evolution_budget, 
                               mode='lines+markers', name='Budget (M‚Ç¨)', yaxis='y2'))
        fig.add_trace(go.Scatter(x=self.annees_chrono, y=self.influence_politique, 
                               mode='lines+markers', name='Influence politique', yaxis='y3'))
        
        fig.update_layout(
            title='√âvolution Conjointe: Membres, Budget et Influence',
            xaxis=dict(title='Ann√©e'),
            yaxis=dict(title='Membres', side='left'),
            yaxis2=dict(title='Budget (M‚Ç¨)', side='right', overlaying='y'),
            yaxis3=dict(title='Influence (0-10)', side='right', overlaying='y', position=0.85),
            height=500
        )
        
        st.plotly_chart(fig, use_container_width=True)

        # Tableau des √©v√©nements cl√©s
        st.markdown("#### üìÖ √âv√©nements Politiques Majeurs")
        df_evenements = pd.DataFrame(self.evenements_cles)
        fig_events = px.timeline(df_evenements, x_start="annee", x_end="annee", y="evenement", 
                               color="impact", color_continuous_scale="Viridis",
                               title="Chronologie des √âv√©nements Cl√©s")
        fig_events.update_yaxes(autorange="reversed")
        st.plotly_chart(fig_events, use_container_width=True)

        st.markdown("""
        <div class="insight-box">
            <h4>üß† Analyse Chronologique</h4>
            <p>La courbe de croissance montre un <strong>pic en 2000</strong> correspondant √† la participation au gouvernement Jospin, suivie d'un d√©clin rapide apr√®s l'√©chec de la strat√©gie autonome lors de la pr√©sidentielle 2002. L'ann√©e 2002 repr√©sente un point d'inflexion strat√©gique : l'√©chec de Madelin √† la pr√©sidentielle (3,91%) pousse √† la fusion dans l'UMP, validant la th√®se de l'impossibilit√© d'une voie purement lib√©rale autonome dans le syst√®me politique fran√ßais.</p>
        </div>
        """, unsafe_allow_html=True)

    def analyse_comparative_partis(self):
        """Analyse comparative avec les autres partis politiques"""
        st.markdown("### üåç Analyse Comparative dans le Paysage Politique")
        
        col1, col2 = st.columns(2)
        
        with col1:
            fig_membres = px.bar(self.comparaison_partis, x='Parti', y='Membres_max',
                               title="Comparaison des Effectifs Maximum",
                               color='Parti')
            st.plotly_chart(fig_membres, use_container_width=True)
            
        with col2:
            fig_ministres = px.bar(self.comparaison_partis, x='Parti', y='Ministres_gouvernement',
                                 title="Influence Gouvernementale (Nombre de Ministres)",
                                 color='Parti')
            st.plotly_chart(fig_ministres, use_container_width=True)

        st.markdown("#### Positionnement Id√©ologique")
        # Carte politique simplifi√©e
        positionnement = pd.DataFrame({
            'Parti': ['D√©mocratie Lib√©rale', 'RPR', 'UDF', 'PS', 'PCF', 'FN'],
            'Economic': [9, 6, 5, 2, 1, 4],  # 10=lib√©ral, 1=√©tatiste
            'Societal': [6, 7, 5, 8, 9, 2],   # 10=progressiste, 1=conservateur
            'Europe': [8, 6, 8, 7, 3, 1]      # 10=f√©d√©raliste, 1=souverainiste
        })
        
        fig_ideologie = px.scatter(positionnement, x='Economic', y='Societal', 
                                 size=[20, 25, 20, 25, 20, 25], text='Parti',
                                 title="Positionnement Id√©ologique des Partis",
                                 labels={'Economic': 'Lib√©ralisme √âconomique', 'Societal': 'Progressisme Soci√©tal'})
        fig_ideologie.update_traces(textposition='top center')
        st.plotly_chart(fig_ideologie, use_container_width=True)

        st.markdown("""
        <div class="insight-box">
            <h4>üß† Analyse Comparative</h4>
            <p>D√©mocratie Lib√©rale occupe une position <strong>unique dans l'espace politique fran√ßais</strong> : ultra-lib√©rale en √©conomie mais mod√©r√©ment progressiste sur les questions soci√©tales. Ce positionnement le distingue nettement du RPR (gaulliste, plus √©tatiste) et de l'UDF (centriste, lib√©ral mod√©r√©). Sa taille modeste mais son influence disproportionn√©e s'expliquent par la raret√© de l'offre lib√©rale pure et la qualit√© de ses cadres. La comparaison avec les partis de gouvernement √©tablis montre les limites structurelles des micro-partis doctrinaux dans le syst√®me politique fran√ßais.</p>
        </div>
        """, unsafe_allow_html=True)

    def simulation_scenarios_historiques(self):
        """Simulation de sc√©narios historiques alternatifs"""
        st.markdown("### üé≤ Simulation de Sc√©narios Historiques Alternatifs")
        st.warning("‚ö†Ô∏è Analyse contrefactuelle √† but p√©dagogique - Ces sc√©narios sont des hypoth√®ses strat√©giques")
        
        scenario = st.selectbox(
            "Choisissez un sc√©nario contrefactuel √† explorer :",
            ["Strat√©gie d'autonomie prolong√©e", "Alliance pr√©coce avec l'UDF", 
             "Leadership diff√©rent", "Contexte politique alternatif"]
        )

        if scenario == "Strat√©gie d'autonomie prolong√©e":
            st.markdown("#### Sc√©nario : Maintien de l'ind√©pendance au-del√† de 2002")
            st.markdown("""
            **Hypoth√®ses :**
            - Refus de la fusion dans l'UMP
            - Maintien d'une structure autonome
            - Strat√©gie de niche lib√©rale
            
            **Impacts probables :**
            ‚úÖ Conservation d'une voix lib√©rale distincte
            ‚úÖ Maintien d'un think tank influent
            ‚ùå Marginalisation √©lectorale accrue
            ‚ùå Difficult√©s financi√®res chroniques
            ‚ùå D√©part des cadres vers l'UMP
            
            **Probabilit√© de succ√®s :** 20%
            """)
            
        elif scenario == "Alliance pr√©coce avec l'UDF":
            st.markdown("#### Sc√©nario : Fusion avec l'UDF plut√¥t qu'avec le RPR")
            st.markdown("""
            **Hypoth√®ses :**
            - Rapprochement avec le centre lib√©ral d√®s 1998
            - Construction d'un p√¥le lib√©ral-centriste
            - Strat√©gie √©lectorale commune
            
            **Impacts probables :**
            ‚úÖ Renforcement mutuel des familles lib√©rales
            ‚úÖ Meilleure r√©sistance face √† l'UMP
            ‚úÖ Positionnement plus lisible
            ‚ùå Conflits doctrinaux avec la gauche UDF
            ‚ùå Risque de dilution identitaire
            
            **Probabilit√© de succ√®s :** 40%
            """)
            
        elif scenario == "Leadership diff√©rent":
            st.markdown("#### Sc√©nario : Leadership autre qu'Alain Madelin")
            col1, col2 = st.columns(2)
            with col1:
                nouveau_leader = st.selectbox("Leader alternatif :", 
                                            ["Jean-Pierre Raffarin", "Herv√© Novelli", "Autre personnalit√©"])
            with col2:
                st.markdown(f"""
                **Impact de {nouveau_leader} :**
                - Style de leadership : {"Plus conciliant" if nouveau_leader == "Raffarin" else "Plus technique"}
                - Relations avec le RPR : {"Am√©lior√©es" if nouveau_leader == "Raffarin" else "Stables"}
                - Strat√©gie m√©diatique : {"Moins polarisante" if nouveau_leader == "Raffarin" else "Similaire"}
                """)
                
        elif scenario == "Contexte politique alternatif":
            st.markdown("#### Sc√©nario : Contexte √©lectoral diff√©rent en 2002")
            score_madelin = st.slider("Score d'Alain Madelin √† la pr√©sidentielle 2002 (%)", 
                                   1.0, 10.0, 3.91)
            
            if score_madelin > 5.0:
                st.success(f"**Avec {score_madelin}% : Perc√©e historique du lib√©ralisme**")
                st.markdown("""
                - L√©gitimation de la voie lib√©rale autonome
                - Financement public garanti
                - Position de force pour n√©gocier avec l'UMP
                - Possible maintien de l'autonomie
                """)
            else:
                st.error(f"**Avec {score_madelin}% : Confirmation de la marginalisation**")
                st.markdown("""
                - Acc√©l√©ration de la fusion dans l'UMP
                - Affaiblissement du leadership Madelin
                - Renforcement des partisans de l'int√©gration
                """)

    def run(self):
        """Fonction principale pour ex√©cuter le dashboard"""
        self.display_header()
        
        # Onglets pour l'analyse
        tab1, tab2, tab3, tab4, tab5 = st.tabs([
            "üîó R√©seau d'Influence", 
            "üìà Performance", 
            "‚è≥ Chronologie Strat√©gique",
            "üåç Analyse Comparative", 
            "üé≤ Sc√©narios Alternatifs"
        ])
        
        with tab1:
            self.analyse_reseau_influence()
        
        with tab2:
            self.analyse_performance_politique()
        
        with tab3:
            self.analyse_chronologie_strategique()
        
        with tab4:
            self.analyse_comparative_partis()
        
        with tab5:
            self.simulation_scenarios_historiques()

# Point d'entr√©e principal
if __name__ == "__main__":
    analyseur = AnalyseDemocratieLiberale()
    analyseur.run()